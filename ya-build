#!/usr/bin/env ruby

# frozen_string_literal: true

#
# This file is part of the git-third-party distribution (https://github.com/kp2pml30/ya-build).
# Copyright (c) 2024 Kira Prokopenko kp2pml30@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'pathname'
require 'logger'
require 'json'
require 'shellwords'

SELF_COMMAND = [RbConfig.ruby, Pathname.new(__FILE__).realpath] + ARGV.dup

NATIVE_SHARED_LIB_EXT = (Proc.new {
	re = [
		[/linux/i, '.so'],
		[/windows/i, '.dll'],
		[/darwin/i, '.dylib'],
	]
	re.each { |r|
		if r[0] =~ RUBY_PLATFORM
			break r[1]
		end
	}
}).call()

NATIVE_STATIC_LIB_EXT = '.a'

class Hash
	def to_ostruct
		prc = Proc.new { |rec, object|
			case object
			when Hash
				OpenStruct.new(Hash[object.map { |k, v| [k, rec.call(rec, v)] }])
			when Array
				object.map { |x| rec(x) }
			else
				object
			end
		}
		prc.call(prc, self)
	end
end

class OpenStruct
	def to_json(options=nil)
		@table.to_json(options)
	end
end

def escape_args_to(buf, args)
	args.each { |a|
		buf << ' '
		buf << Shellwords.escape(a).gsub(/\\=/, '=')
	}
end

class Target
	attr_reader :trg_name, :meta, :outputs

	def initialize(trg_name, dependencies)
		@meta = OpenStruct.new
		if dependencies.nil?
			raise "dependencies can't be nil"
		end
		@trg_name = trg_name
		if @trg_name.kind_of?(Pathname)
			@trg_name = @trg_name.to_s
		end
		@outputs = [trg_name]
		raise "target name is not a string (got `#{@trg_name}`)" if not @trg_name.kind_of?(String)
		@dependencies = dependencies
	end

	def add_deps(*deps)
		@dependencies.concat(deps.flatten)
	end

	def inspect
		"<#{self.class.name}:#{@trg_name}>"
	end

	def dump_rules(buf)
		buf << "build "
		escape_args_to(buf, outputs)
		buf << ": #{mode}"
		@dependencies.each { |d|
			buf << ' '
			if d.kind_of?(Target)
				buf << d.trg_name
			elsif d.kind_of?(Pathname)
				buf << d.to_s
			elsif d.kind_of?(String)
				buf << d
			else
				raise "Invalid dependency #{d} : #{d.class} for #{self}"
			end
		}
		buf << "\n"
		dump_rules_impl(buf)
		buf << "\n\n"
	end

	def mode
		raise "abstract"
	end

	protected def dump_rules_impl(buf)
		raise "abstract"
	end
end

class CommandTarget < Target
	attr_reader :output_file
	def initialize(output_file, dependencies, cwd, commands, depfile, pool)
		super(output_file, dependencies)
		@depfile = depfile
		@output_file = output_file
		@cwd = cwd
		@commands = commands
		@pool = pool
	end

	protected def dump_rules_impl(buf)
		if not @pool.nil?
			buf << "  pool = #{@pool}\n"
		end
		if not @cwd.nil?
			buf << "  WD = #{Shellwords.escape @cwd}\n"
		end
		if not @depfile.nil?
			buf << "  depfile = #{@depfile}\n"
		end
		buf << "  COMMAND ="
		@commands.each_with_index { |c, i|
			if i != 0
				buf << " &&"
			end
			escape_args_to(buf, c)
		}
		buf << "\n"
	end

	def mode
		"CUSTOM_COMMAND"
	end
end

class ConfigureGeneratedTarget < Target
	def initialize(configurator, output_file)
		@configurator = configurator
		super(output_file, [])
	end
	def dump_rules_impl(buf)
		buf << "  pool = console\n"
	end
	def mode
		"RERUN_YA_BUILD"
	end
end

class CTarget < Target
	attr_reader :output_file
	def initialize(output_file, mode, dependencies, flags, cc, root_dir)
		super(output_file, dependencies)
		@root_dir = root_dir
		@mode = mode
		@output_file = output_file
		@flags = flags
		@cc = cc
	end

	protected def dump_rules_impl(buf)
		if @mode != "link"
			buf << "  ROOT_DIR = #{Shellwords.escape @root_dir}/\n"
		end
		if not @cc.nil?
			buf << "  CC = #{@cc}\n"
		end
		if not @flags.nil? and not @flags.empty?
			buf << "  cflags ="
			escape_args_to(buf, @flags)
			buf << "\n"
		end
	end

	def mode()
		case @mode
		when "compile"
			"COMPILE_C"
		when "link"
			"LINK_C"
		else
			raise "unknown mode #{@mode}"
		end
	end
end

class AliasTarget < Target
	def initialize(name, dependencies)
		super(name, dependencies)
	end

	protected def dump_rules_impl(buf)
	end

	def mode()
		"phony"
	end
end

class CopyTarget < Target
	def initialize(dest, src)
		super(dest, [src])
	end

	protected def dump_rules_impl(buf)
	end

	def mode()
		"COPY"
	end
end

class Configurator
	attr_reader :root_src, :root_build, :config

	private def get_tag_target(tag)
		ret = @tags[tag]
		return ret if not ret.nil?
		ret = AliasTarget.new("tags/#{tag}", [])
		@tags[tag] = ret
		register_target(ret)
		ret
	end

	def initialize(src, build, preloads)
		@rules = []
		@root_src = Pathname.new(src).realpath
		@root_build = Pathname.new(build)
		@root_build.mkpath()
		@root_build = @root_build.realpath

		@trivial_targets = String.new

		@tags = {}

		@config_target = ConfigureGeneratedTarget.new(self, 'build.ninja')
		@targets = [@config_target]

		@stack = []

		get_tag_target('all')

		@logger = Logger.new(STDOUT, level: Logger::INFO)
		@logger.formatter = proc do |severity, datetime, progname, msg|
			#date_format = datetime.strftime("%H:%M:%S")
			"#{severity.ljust(5)} #{msg}\n"
		end

		@config = OpenStruct.new
		cnf = root_src.join('yabuild-default-conf.rb')
		if cnf.exist?
			@config_target.add_deps(cnf)
			@config = self.instance_eval(cnf.read, cnf.to_s)
		end

		preloads.each { |preload|
			preload = Pathname.new(preload).realpath
			@config_target.add_deps(preload)
			contents = preload.read
			self.instance_eval(contents, preload.to_s)
		}
	end

	private def extend_config_impl(l, r)
		if l.kind_of? Hash
			l.merge(r)
		elsif l.kind_of? OpenStruct
			OpenStruct.new(l.instance_eval { @table.merge(r) })
		elsif r.kind_of?(Proc)
			r.call(l)
		else
			r
		end
	end

	def extend_config(obj)
		@config = extend_config_impl(@config, obj)
	end

	def to_s
		"<Configurator>"
	end

	def inspect
		"<Configurator>"
	end

	def include_dir(path)
		new_stack = @stack[-1].clone
		new_stack.path = new_stack.path.join(path)
		@stack.push(new_stack)
		begin
			cur_build.mkpath()
			run_last_stack()
		ensure
			@stack.pop
		end
	end

	def eval_script(path)
		script_path = cur_src.join(@stack[-1].path.join(path))
		@config_target.add_deps(script_path)
		contents = script_path.read
		self.instance_eval(contents, script_path.to_s)
	end

	private def run_last_stack()
		path = @stack[-1].path
		@logger.info("configuring #{path}")
		script_path = root_src.join(path, 'yabuild.rb')
		@config_target.add_deps(script_path)
		contents = script_path.read
		self.instance_eval(contents, script_path.to_s)
	end

	def add_rule(rule)
		@rules.push(rule)
	end

	private def rules_str()
		beg = [<<-EOF
# ya-build generated, do not edit

CC = clang

rule RERUN_YA_BUILD
  command = cd #{Shellwords.escape Dir.getwd} && #{SELF_COMMAND.map { |x| Shellwords.escape x }.join(' ')}
  description = rerunning ya-build

rule CLEAN
  command = /usr/bin/ninja $FILE_ARG -t clean $TARGETS
  description = Cleaning all built files...

rule HELP
  command = /usr/bin/ninja -t targets rule phony rule CLEAN rule HELP
  description = All primary targets available

rule CUSTOM_COMMAND
  command = cd $WD && $COMMAND
  description = $DESC

rule COMPILE_C
  depfile = $out.d
  command = cd $ROOT_DIR && \
    $CC -MD -MF $out.d $cflags -o $out "$$(#{[RbConfig.ruby, Pathname.new(__FILE__).realpath, '__realpath_to_from'].map(&Shellwords.method(:escape)).join(' ')} "$in" "$ROOT_DIR")" && \
    #{[RbConfig.ruby, Pathname.new(__FILE__).realpath, '__patch_dep'].map(&Shellwords.method(:escape)).join(' ')} $ROOT_DIR $out.d

rule LINK_C
  command = $CC $cflags -o $out $in

rule COPY
  command = cp $in $out

EOF
		]
		beg += @rules
		beg.join("\n\n")
	end

	def run()
		@stack = [
			OpenStruct.new(
				:path => Pathname.new("."),
				:project => "",
			),
		]

		run_last_stack()

		File.write(root_build.join('config.json'), @config.to_json)

		File.write(root_build.join('rules.ninja'), rules_str)

		build_str = String.new()
		build_str << <<-EOF
# ya-build generated, do not edit
# src: #{root_src}
ninja_required_version = 1.5
ya_ninja_workdir = #{root_build}
include rules.ninja

build clean: CLEAN

build help: HELP

EOF
		@targets.each { |t|
			t.dump_rules(build_str)
		}
		build_str << "default tags/all\n"
		File.write(root_build.join('build.ninja'), build_str)
	end

	def find_target(name)
		suitable = @targets.filter { |trg|
			trg.trg_name.match?(name)
		}
		raise "couldn't find target by name #{name} ; suitable: #{suitable}" if suitable.size() != 1
		suitable[0]
	end

	private def register_target(trg)
		@targets.push(trg)
	end

	private def return_target(trg, tags: [], &block)
		register_target(trg)
		tags.map { |t| get_tag_target(t) }.each { |t|
			t.add_deps trg
		}
		if not block.nil?
			trg.instance_eval(&block)
		end
		trg
	end

	def project(name)
		new_stack = @stack[-1].clone
		if new_stack.project == ""
			new_stack.project += "#{name}"
		else
			new_stack.project += "/#{name}"
		end
		@stack.push(new_stack)
		begin
			yield
		ensure
			@stack.pop
		end
	end

	def cur_build()
		root_build.join('generated', @stack[-1].path)
	end

	def cur_src()
		root_src.join(@stack[-1].path)
	end

	def target_command(
		output_file:,
		dependencies:,
		cwd: nil,
		command: nil,
		commands: nil,
		depfile: nil,
		pool: nil,
		**kwargs,
		&blk
	)
		if commands.nil? == command.nil?
			raise "exectly one of command or commands must be specified"
		end
		if commands.nil?
			commands = [command]
		end

		if cwd.nil?
			cwd = cur_src
		end

		trg = CommandTarget.new(output_file, dependencies, cwd, commands, depfile, pool)
		return_target(trg, **kwargs, &blk)
	end

	def target_copy(dest:, src:, **kwargs, &blk)
		trg = CopyTarget.new(dest, src)
		return_target(trg, **kwargs, &blk)
	end

	def target_c(output_file:, mode:, root_dir: nil, file: nil, objs: nil, flags: nil, cc: nil, **kwargs, &blk)
		if (mode == "compile") == file.nil?
			raise "file must be provided only for compile"
		end
		if (mode == "link") == objs.nil?
			raise "objs must be provided only for link"
		end
		if root_dir.nil?
			root_dir = cur_src
		end
		deps = if objs.nil? then [
			root_dir.join(file)
		] else objs end
		trg = CTarget.new(output_file, mode, deps, flags, cc, root_dir)
		return_target(trg, **kwargs, &blk)
	end

	def target_alias(name, *dependencies, inherit_meta: [], **kwargs, &blk)
		name_full = @stack[-1].project
		if name_full != ""
			name_full += "/"
		end
		name_full += name
		trg = AliasTarget.new(name_full, dependencies)
		if dependencies.size() != 1 and inherit_meta.size() != 0
			raise "Can inherit meta only for single dependency alias"
		end
		inherit_meta.each { |prop|
			trg.meta.send("#{prop}=", dependencies[0].meta.send(prop))
		}
		return_target(trg, **kwargs, &blk)
	end

	def mark_as_config_generated(file)
		@config_target.outputs.push file
	end

	def reconfigure_on_change(file)
		@config_target.add_deps file
	end
end

def config()
	options = {
		:src => '.',
		:build => 'build',
		:config => nil,
		:preloads => [],
	}
	OptionParser.new do |opts|
		opts.on '-b=DIR', '--build=DIR', 'Output directory'
		opts.on '-s=DIR', '--src=DIR', 'Project root directory'
		opts.on '--preload=FILE', 'Toolchain file' do |f|
			options[:preloads] << f
			nil
		end
		opts.on '--help' do
			puts opts
			exit false
		end
	end.parse!(into: options)

	configurator = Configurator.new(options[:src], options[:build], options[:preloads])
	configurator.run
end

def patch_dep()
	_, root, dep = ARGV
	root = Pathname.new(root)
	f = File.read(dep)
	deps = []
	last_dep = []
	f.lines { |l|
		l = l.strip()
		splitted = Shellwords.split(l)
		last_dep.concat(splitted.filter { |x| x != ':' && x != '\\' }. map { |f|
			if f.end_with?(':')
				f = f[...-1]
			end
			f = Pathname.new(f)
			if f.absolute?
				f
			else
				root.join(f)
			end
		})
		if splitted.size == 0 || splitted[-1] != '\\'
			if last_dep.size != 0
				deps << last_dep
				last_dep = []
			end
		end
	}
	if last_dep.size != 0
		deps << last_dep
	end
	res = String.new
	deps.each { |d|
		res << d[0].to_s << ":"
		d[1..].each { |d|
			res << ' ' << Shellwords.escape(d.to_s)
		}
		res << "\n\n"
	}
	File.write(dep, res)
end

def realpath_to_from
	_, to, from = ARGV
	puts Pathname.new(to).relative_path_from(from)
end

modes = {
	'config' => method(:config),
	'__patch_dep' => method(:patch_dep),
	'__realpath_to_from' => method(:realpath_to_from)
}

toExec = modes[ARGV[0]]
if toExec == nil
	puts "unknown mode #{ARGV[0]}"
	puts "expected: #{modes.keys.filter{ |x| !x.start_with?('__') }.join('|')}"
	exit false
end

toExec.call()

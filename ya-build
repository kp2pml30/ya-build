#!/usr/bin/env ruby

# frozen_string_literal: true

#
# This file is part of the git-third-party distribution (https://github.com/kp2pml30/ya-build).
# Copyright (c) 2024 Kira Prokopenko kp2pml30@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'pathname'
require 'logger'
require 'json'
require 'shellwords'

SELF_COMMAND = [RbConfig.ruby, Pathname.new(__FILE__).realpath] + ARGV.dup

NATIVE_SHARED_LIB_EXT = (Proc.new {
	re = [
		[/linux/i, '.so'],
		[/windows/i, '.dll'],
		[/darwin/i, '.dylib'],
	]
	re.each { |r|
		if r[0] =~ RUBY_PLATFORM
			break r[1]
		end
	}
}).call()

NATIVE_STATIC_LIB_EXT = '.a'

class Hash
	def to_ostruct
		prc = Proc.new { |rec, object|
			case object
			when Hash
				OpenStruct.new(Hash[object.map { |k, v| [k, rec.call(rec, v)] }])
			when Array
				object.map { |x| rec(x) }
			else
				object
			end
		}
		prc.call(prc, self)
	end
end

class OpenStruct
	def to_json(options=nil)
		@table.to_json(options)
	end
end

class NinjaPiece
	protected def dump_ninja(buf)
		raise "abstract"
	end
end

class NinjaPieceRaw
	def initialize(data)
		@data = data
	end
	def dump_ninja(buf)
		buf << @data << "\n\n"
	end
end

class Target < NinjaPiece
	attr_reader :meta, :outputs, :inputs, :implicit_inputs, :implicit_outputs, :rule

	def initialize(outputs:, inputs:, rule:, implicit_inputs: [], implicit_outputs: [])
		raise "invalid param" if not outputs.kind_of?(Array)
		raise "invalid param" if not inputs.kind_of?(Array)
		raise "invalid param" if not implicit_inputs.kind_of?(Array)
		raise "invalid param" if not implicit_outputs.kind_of?(Array)
		raise "rule must be a string" if not rule.kind_of?(String)

		@meta = OpenStruct.new
		@implicit_inputs = implicit_inputs
		@implicit_outputs = implicit_outputs
		@inputs = inputs.clone
		@outputs = outputs.clone
		@rule = rule
	end

	def dump_ninja(buf)
		raise "no output" if outputs.size == 0
		buf << "build"
		DefaultTargets::escape_args_to(buf, outputs)
		if implicit_outputs.size > 0
			buf << " |"
			DefaultTargets::escape_args_to(buf, implicit_outputs)
		end
		buf << " : #{rule}"
		DefaultTargets::escape_args_to(buf, inputs)
		if implicit_inputs.size > 0
			buf << " |"
			DefaultTargets::escape_args_to(buf, implicit_inputs)
		end
		buf << "\n"
		cb = Proc.new { |k, v|
			buf << "  " << k << " = " << v << "\n"
		}
		dump_vars cb
		buf << "\n"
	end

	protected def dump_vars(cb)
		raise "abstract for #{self}"
	end
end

module DefaultTargets

	def self.escape_args_to(buf, args)
		raise "buf can't be nil" if buf.nil?
		dump_args = args.flat_map { |arg|
			if arg.kind_of?(Target)
				arg.outputs + arg.implicit_outputs
			elsif arg.kind_of?(Pathname)
				[arg.to_s]
			elsif arg.kind_of?(String)
				[arg]
			else
				raise "unsupported type #{arg.class} of #{arg}"
			end
		}

		dump_args.each { |a|
			buf << ' '
			buf << Shellwords.escape(a).gsub(/\\=/, '=')
		}
	end

	class Phony < Target
		attr_reader :name
		def initialize(name:, inputs:, implicit_inputs: [])
			super(outputs: [name].freeze, inputs: inputs, implicit_inputs: implicit_inputs, implicit_outputs: [].freeze, rule: "phony")
			@name = name
		end

		protected def dump_vars(cb)
		end
	end

	class Command < Target
		attr_reader :output_file
		def initialize(output_file, dependencies, cwd, commands, depfile, pool, env)
			super(outputs: [output_file], inputs: dependencies, rule: 'CUSTOM_COMMAND')
			@env = env
			@depfile = depfile
			@output_file = output_file
			@cwd = cwd
			@commands = commands
			@pool = pool
		end

		protected def dump_vars(cb)
			if @env.size > 0
				buf = String.new
				buf << "env"
				@env.each { |k, v|
					buf << ' ' << k << '=' << Shellwords.escape(v).gsub(/\\=/, '=')
				}
				cb.('ENV', buf)
			end
			if not @pool.nil?
				cb.('pool', @pool)
			end
			if not @cwd.nil?
				cb.('CWD', Shellwords.escape(@cwd))
			end
			if not @depfile.nil?
				cb.('depfile', Shellwords.escape(@depfile))
			end
			cmd = String.new
			@commands.each_with_index { |c, i|
				if i != 0
					cmd << " &&"
				end
				DefaultTargets::escape_args_to(cmd, c)
			}
			cb.('COMMAND', cmd)
		end
	end

	class ConfigureGenerated < Target
		def initialize(configurator)
			@configurator = configurator
			super(outputs: [], inputs: [], rule: 'RERUN_YA_BUILD')
		end

		def dump_vars(cb)
			cb.('pool', 'console')
		end
	end

	class C < Target
		attr_reader :output_file
		def initialize(output:, inputs:, flags:, cc:, rule:, root_dir: nil)
			super(outputs: [output].freeze, inputs: inputs, rule: rule)
			@root_dir = root_dir
			@output_file = output
			@flags = flags
			@cc = cc
		end

		protected def dump_vars(cb)
			if not @cc.nil?
				cb.('CC', Shellwords.escape(@cc))
			end
			if not @root_dir.nil?
				cb.('ROOT_DIR', Shellwords.escape(@root_dir))
			end
			if not @flags.nil? and not @flags.empty?
				cflags  = String.new
				DefaultTargets::escape_args_to(cflags, @flags)
				cb.('cflags', cflags)
			end
		end
	end

	class Copy < Target
		def initialize(dest, src)
			super(outputs: [dest].freeze, inputs: src, rule: "COPY")
		end

		protected def dump_vars(buf)
		end
	end
end

class Configurator
	attr_reader :root_src, :root_build, :config, :logger, :ninja_path, :ninja_files_parts

	private def get_tag_target(tag)
		ret = @tags[tag]
		return ret if not ret.nil?
		ret = DefaultTargets::Phony.new(name: "tags/#{tag}", inputs: [])
		@tags[tag] = ret
		register_target(ret)
		ret
	end

	def initialize(src, build, preloads)
		@root_src = Pathname.new(src).realpath
		@root_build = Pathname.new(build)
		@root_build.mkpath()
		@root_build = @root_build.realpath

		@ninja_files_parts = Hash.new
		@ninja_files_parts[''] = []

		@tags = {}

		@config_target = DefaultTargets::ConfigureGenerated.new(self)
		@named_targets = []

		@stack = []

		get_tag_target('all')

		@logger = Logger.new(STDOUT, level: Logger::INFO)
		@logger.formatter = proc do |severity, datetime, progname, msg|
			#date_format = datetime.strftime("%H:%M:%S")
			"#{severity.ljust(5)} #{msg}\n"
		end
		@logger.info("RUBY_PLATFORM is #{RUBY_PLATFORM}")

		@config = OpenStruct.new
		@config.tools = OpenStruct.new
		cnf = root_src.join('yabuild-default-conf.rb')
		if cnf.exist?
			@config_target.inputs.push(cnf)
			self.instance_eval(cnf.read, cnf.to_s)
		end

		preloads.each { |preload|
			preload = Pathname.new(preload).realpath
			@config_target.inputs.push(preload)
			self.instance_eval(preload.read, preload.to_s)
		}

		@ninja_path = find_executable('ninja', critical: true)

		fill_default_ninja
		register_target(@config_target)
	end

	private def fill_default_ninja
		default_pieces = []
		@ninja_files_parts['default-rules'] = default_pieces

		@ninja_files_parts[''] << NinjaPieceRaw.new(<<-EOF
# ya-build generated, do not edit
# src: #{root_src}
ninja_required_version = 1.5
ya_ninja_workdir = #{root_build}
include default-rules.ninja

build clean: CLEAN

build help: HELP

EOF
		)

		default_pieces << NinjaPieceRaw.new(<<-EOF
# ya-build generated, do not edit

CC = clang

rule RERUN_YA_BUILD
  command = cd #{Shellwords.escape Dir.getwd} && #{SELF_COMMAND.map { |x| Shellwords.escape x }.join(' ')}
  description = rerunning ya-build

rule CLEAN
  command = #{Shellwords.escape ninja_path} $FILE_ARG -t clean $TARGETS
  description = Cleaning all built files...

rule HELP
  command = #{Shellwords.escape ninja_path} -t targets rule phony rule CLEAN rule HELP
  description = All primary targets available

rule CUSTOM_COMMAND
  command = cd $CWD && $ENV $COMMAND
  description = $DESC

rule C_COMPILE
  depfile = $out.d
  command = $CC \
        -MD -MF $out.d \
        -c $cflags \
        -o $out \
        $in

rule C_LINK
  command = $CC $cflags -o $out $in

rule COPY
  command = cp $in $out

EOF
)
	end

	private def extend_config_impl(l, r)
		if l.kind_of? Hash
			l.merge(r) { |k, ov, nv|
				extend_config_impl ov, nv
			}
		elsif l.kind_of? OpenStruct
			OpenStruct.new(l.instance_eval {
					@table
				}.merge(r) { |k, ov, nv|
					extend_config_impl ov, nv
				}.transform_values { |v|
					if v.kind_of? Hash then v.to_ostruct else v end
				}
			)
		elsif r.kind_of?(Proc)
			r.call(l)
		elsif r.kind_of?(Hash)
			r.to_ostruct
		else
			r
		end
	end

	def extend_config(obj)
		@config = extend_config_impl(@config, obj)
	end

	def to_s
		"<Configurator>"
	end

	def inspect
		"<Configurator>"
	end

	def include_dir(path)
		new_stack = @stack[-1].clone
		new_stack.path = new_stack.path.join(path)
		@stack.push(new_stack)
		begin
			cur_build.mkpath()
			run_last_stack()
		ensure
			@stack.pop
		end
	end

	def eval_script(path)
		script_path = cur_src.join(path)
		contents = script_path.read
		@config_target.inputs.push script_path
		self.instance_eval(contents, script_path.to_s)
	end

	private def run_last_stack()
		path = @stack[-1].path
		@logger.info("entering #{path}")
		script_path = root_src.join(path, 'yabuild.rb')
		@config_target.inputs.push(script_path)
		contents = script_path.read
		self.instance_eval(contents, script_path.to_s)
	end

	def run()
		@stack = [
			OpenStruct.new(
				:path => Pathname.new("."),
				:project => "",
			),
		]

		run_last_stack()

		File.write(root_build.join('config.json'), @config.to_json)

		ninja_files_parts.each { |k, v|
			@config_target.outputs << "#{if k == "" then "build" else k end}.ninja"
		}

		ninja_files_parts.each { |k, v|
			if k == ''
				k = 'build'
			end
			fname = root_build.join("#{k}.ninja")
			buf = String.new
			buf << "# ya-build generated, do not edit\n"
			v.each do |v|
				v.dump_ninja buf
			rescue => e
				logger.error("can't dump #{v.inspect}")
				raise
			end
			if k == 'build'
				buf << "default tags/all\n"
			end
			File.write fname, buf
		}
	end

	def find_target(name)
		suitable = @named_targets.filter { |trg|
			trg.name.match?(name)
		}
		raise "couldn't find target by name #{name} ; suitable: #{suitable}" if suitable.size() != 1
		suitable[0]
	end

	private def register_target(trg, to: '')
		@ninja_files_parts[to] << trg
		if trg.kind_of?(DefaultTargets::Phony)
			@named_targets.push(trg)
		end
	end

	private def return_target(trg, tags: [], &block)
		register_target(trg)
		tags.map { |t| get_tag_target(t) }.each { |t|
			t.inputs.push trg
		}
		if not block.nil?
			trg.instance_eval(&block)
		end
		trg
	end

	def project(name)
		new_stack = @stack[-1].clone
		if new_stack.project == ""
			new_stack.project += "#{name}"
		else
			new_stack.project += "/#{name}"
		end
		@stack.push(new_stack)
		begin
			yield
		ensure
			@stack.pop
		end
	end

	def cur_build()
		root_build.join('generated', @stack[-1].path)
	end

	def cur_src()
		root_src.join(@stack[-1].path)
	end

	def find_executable(name, critical: false, check_first: [], check_path: true, check_last: [], &blk)
		chck = Proc.new { |path|
			if path.nil?
				next false
			end
			if not path.exist?
				next false
			end
			logger.debug("executable #{name} found at #{path}")
			if blk.nil?
				next true
			end

			begin
				res = blk.(path)
				if not res
					logger.info("executable #{name} found at #{path} does not work (check failed)")
				end
				res
			rescue => e
				logger.info("executable #{name} found at #{path} does not work\n#{e}")
				false
			end
		}

		override = config.tools.send(name)
		if not override.nil?
			res = chck.(override)
			if res.nil? and critical
				logger.error("executable #{name} not found for override #{override}")
				raise "#{name} not found"
			end
			return res
		end

		check_first.each { |p|
			path = Pathname.new(p).join(name)
			if chck.(path)
				return path
			end
		}
		if check_path
			paths = ENV['PATH'].split(':')
			paths.each { |p|
				path = Pathname.new(p).join(name)
				if chck.(path)
					return path
				end
			}
		end
		check_last.each { |p|
			path = Pathname.new(p).join(name)
			if chck.(path)
				return path
			end
		}

		if critical
			logger.error("executable #{name} not found")
			raise "#{name} not found"
		end
		logger.info("executable #{name} not found")
		return nil
	end

	def target_command(
		output_file:,
		dependencies:,
		cwd: nil,
		command: nil,
		commands: nil,
		depfile: nil,
		pool: nil,
		env: {},
		**kwargs,
		&blk
	)
		if commands.nil? == command.nil?
			raise "exactly one of command or commands must be specified"
		end
		if commands.nil?
			commands = [command]
		end

		if cwd.nil?
			cwd = cur_src
		end

		trg = DefaultTargets::Command.new(output_file, dependencies, cwd, commands, depfile, pool, env)
		return_target(trg, **kwargs, &blk)
	end

	def target_copy(dest:, src:, **kwargs, &blk)
		trg = DefaultTargets::Copy.new(dest, src)
		return_target(trg, **kwargs, &blk)
	end

	def target_c_compile(output_file:, file:, flags: nil, cc: nil, **kwargs, &blk)
		real_out = output_file.relative_path_from(root_build)
		real_file = file.relative_path_from(root_build)
		trg = DefaultTargets::C.new(output: real_out.to_s, inputs: [real_file.to_s], flags: flags, cc: cc, rule: "C_COMPILE")
		return_target(trg, **kwargs, &blk)
	end

	def target_c_link(output_file:, objs:, flags: nil, cc: nil, **kwargs, &blk)
		trg = DefaultTargets::C.new(output: output_file, inputs: objs, flags: flags, cc: cc, rule: "C_LINK")
		return_target(trg, **kwargs, &blk)
	end

	def target_alias(name, *dependencies, inherit_meta: [], **kwargs, &blk)
		name_full = @stack[-1].project
		if name_full != ""
			name_full += "/"
		end
		name_full += name
		trg = DefaultTargets::Phony.new(name: name_full, inputs: dependencies)
		if dependencies.size() != 1 and inherit_meta.size() != 0
			raise "Can inherit meta only for single dependency alias"
		end
		inherit_meta.each { |prop|
			trg.meta.send("#{prop}=", dependencies[0].meta.send(prop))
		}
		return_target(trg, **kwargs, &blk)
	end

	def mark_as_config_generated(file)
		@config_target.implicit_outputs.push file
	end

	def reconfigure_on_change(file)
		@config_target.inputs.push file
	end
end

def config()
	options = {
		:src => '.',
		:build => 'build',
		:config => nil,
		:preloads => [],
	}
	OptionParser.new do |opts|
		opts.on '-b=DIR', '--build=DIR', 'Output directory'
		opts.on '-s=DIR', '--src=DIR', 'Project root directory'
		opts.on '--preload=FILE', 'Toolchain file' do |f|
			options[:preloads] << f
			nil
		end
		opts.on '--help' do
			puts opts
			exit false
		end
	end.parse!(into: options)

	configurator = Configurator.new(options[:src], options[:build], options[:preloads])
	configurator.run
end

def patch_dep()
	_, root, dep = ARGV
	root = Pathname.new(root)
	f = File.read(dep)
	deps = []
	last_dep = []
	f.lines { |l|
		l = l.strip()
		splitted = Shellwords.split(l)
		last_dep.concat(splitted.filter { |x| x != ':' && x != '\\' }. map { |f|
			if f.end_with?(':')
				f = f[...-1]
			end
			f = Pathname.new(f)
			if f.absolute?
				f
			else
				root.join(f)
			end
		})
		if splitted.size == 0 || splitted[-1] != '\\'
			if last_dep.size != 0
				deps << last_dep
				last_dep = []
			end
		end
	}
	if last_dep.size != 0
		deps << last_dep
	end
	res = String.new
	deps.each { |d|
		res << d[0].to_s << ":"
		d[1..].each { |d|
			res << ' ' << Shellwords.escape(d.to_s)
		}
		res << "\n\n"
	}
	File.write(dep, res)
end

def realpath_to_from
	_, to, from = ARGV
	puts Pathname.new(to).relative_path_from(from)
end

modes = {
	'config' => method(:config),
	'__patch_dep' => method(:patch_dep),
	'__realpath_to_from' => method(:realpath_to_from)
}

toExec = modes[ARGV[0]]
if toExec == nil
	puts "unknown mode #{ARGV[0]}"
	puts "expected: #{modes.keys.filter{ |x| !x.start_with?('__') }.join('|')}"
	exit false
end

toExec.call()
